diff --git a/python/tvm/contrib/nvcc.py b/python/tvm/contrib/nvcc.py
index 5a104be99..1d8b92f21 100644
--- a/python/tvm/contrib/nvcc.py
+++ b/python/tvm/contrib/nvcc.py
@@ -107,7 +107,9 @@ def compile_cuda(code, target_format="ptx", arch=None, options=None, path_target
     (out, _) = proc.communicate()
 
     if proc.returncode != 0:
-        msg = code
+        msg = "=========="
+        msg += code
+        msg += "++++++++++\n"
         msg += "\nCompilation error:\n"
         msg += py_str(out)
         raise RuntimeError(msg)
diff --git a/src/target/llvm/codegen_amdgpu.cc b/src/target/llvm/codegen_amdgpu.cc
index 89b567b6b..17e3fc99b 100644
--- a/src/target/llvm/codegen_amdgpu.cc
+++ b/src/target/llvm/codegen_amdgpu.cc
@@ -215,7 +215,7 @@ class CodeGenAMDGPU : public CodeGenLLVM {
       llvm::Value* v1 = MakeValue(op->args[1]);
       if (op->args[1]->dtype.is_float()) {
 #if TVM_LLVM_VERSION >= 90
-#if TVM_LLVM_VERSION >= 130
+#if TVM_LLVM_VERSION >= 131
         return builder_->CreateAtomicRMW(llvm::AtomicRMWInst::FAdd, v0, v1, llvm::MaybeAlign(),
                                          llvm::AtomicOrdering::Monotonic);
 #else
@@ -226,7 +226,7 @@ class CodeGenAMDGPU : public CodeGenLLVM {
         LOG(FATAL) << "Floating point atomic requires LLVM 9 or newer";
 #endif
       }
-#if TVM_LLVM_VERSION >= 130
+#if TVM_LLVM_VERSION >= 131
       return builder_->CreateAtomicRMW(llvm::AtomicRMWInst::Add, v0, v1, llvm::MaybeAlign(),
                                        llvm::AtomicOrdering::Monotonic);
 #else
diff --git a/src/target/llvm/codegen_llvm.cc b/src/target/llvm/codegen_llvm.cc
index 305358d07..03d6778e6 100644
--- a/src/target/llvm/codegen_llvm.cc
+++ b/src/target/llvm/codegen_llvm.cc
@@ -973,7 +973,7 @@ llvm::Value* CodeGenLLVM::CreateIntrinsic(const CallNode* op) {
         (id != llvm::Intrinsic::prefetch) ? GetLLVMType(GetRef<PrimExpr>(op)) : t_void_;
     llvm::Function* f = GetIntrinsicDecl(id, return_type, arg_type);
     ICHECK(f) << "Cannot find intrinsic declaration, possible type mismatch: "
-#if TVM_LLVM_VERSION >= 130
+#if TVM_LLVM_VERSION >= 131
               << llvm::Intrinsic::getBaseName(id).str();
 #else
               << llvm::Intrinsic::getName(id, {});
diff --git a/src/target/llvm/codegen_nvptx.cc b/src/target/llvm/codegen_nvptx.cc
index 2442d2ccb..84406e6fa 100644
--- a/src/target/llvm/codegen_nvptx.cc
+++ b/src/target/llvm/codegen_nvptx.cc
@@ -269,7 +269,7 @@ llvm::Value* CodeGenNVPTX::CreateIntrinsic(const CallNode* op) {
     llvm::Value* v1 = MakeValue(op->args[1]);
     if (op->args[1]->dtype.is_float()) {
 #if TVM_LLVM_VERSION >= 90
-#if TVM_LLVM_VERSION >= 130
+#if TVM_LLVM_VERSION >= 131
       return builder_->CreateAtomicRMW(llvm::AtomicRMWInst::FAdd, v0, v1, llvm::MaybeAlign(),
                                        llvm::AtomicOrdering::Monotonic);
 #else
@@ -280,7 +280,7 @@ llvm::Value* CodeGenNVPTX::CreateIntrinsic(const CallNode* op) {
       LOG(FATAL) << "Floating point atomic requires LLVM 9 or newer";
 #endif
     }
-#if TVM_LLVM_VERSION >= 130
+#if TVM_LLVM_VERSION >= 131
     return builder_->CreateAtomicRMW(llvm::AtomicRMWInst::Add, v0, v1, llvm::MaybeAlign(),
                                      llvm::AtomicOrdering::Monotonic);
 #else
diff --git a/src/target/llvm/llvm_module.cc b/src/target/llvm/llvm_module.cc
index 874992578..7f1f2be7b 100644
--- a/src/target/llvm/llvm_module.cc
+++ b/src/target/llvm/llvm_module.cc
@@ -447,7 +447,7 @@ TVM_REGISTER_GLOBAL("target.llvm_lookup_intrinsic_id")
     });
 
 TVM_REGISTER_GLOBAL("target.llvm_get_intrinsic_name").set_body_typed([](int64_t id) -> String {
-#if TVM_LLVM_VERSION >= 130
+#if TVM_LLVM_VERSION >= 131
   return std::string(llvm::Intrinsic::getBaseName(static_cast<llvm::Intrinsic::ID>(id)));
 #elif TVM_LLVM_VERSION >= 40
   // This is the version of Intrinsic::getName that works for overloaded
